<?php

/* ------------------------------------------------------- */
/* -- Global Variables ----------------------------------- */
/* ------------------------------------------------------- */

$uncertainty_in_line = false;
$uncertain_words = array();

/* ------------------------------------------------------- */
/* -- Functions ------------------------------------------ */
/* ------------------------------------------------------- */

// ------------------------------------------------------------------------ //
// Accepts:	$letter as string
// Returns: boolean
// Calls:	none
// ------------------------------------------------------------------------ //
function is_vowel($letter) {
	if (in_array($letter, array('a','e','i','o','u','y'))) {
		return true;
	} else {
		return false;
	}
}

// ------------------------------------------------------------------------ //
// Accepts:	$letter as string
// Returns:	boolean
// Calls:	none
// ------------------------------------------------------------------------ //
function is_punctuation($letter) {
	if (in_array($letter, array("'",'"','`','-','—','–','(',')','[',']','{','}',',','.','!','?',';',':','/','\\','&'))) {
		return true;
	} else {
		return false;
	}
}

// ------------------------------------------------------------------------ //
// Accepts:	$line as string
// Returns: $count as int
// Calls:	query_word($word)
//			count_syllables($word)
// Globals:	$uncertainty_in_line as boolean
//			$uncertain_words as array
//			$verbose as boolean
//			$countsource as boolean
// ------------------------------------------------------------------------ //
function count_line($line) {

	global $uncertainty_in_line;
	global $uncertain_words;
	global $verbose;
	global $countsource;
		
	$uncertainty_in_line = false;	// Reset uncertainty flag for each line
	$uncertain_words = array();		// Reset uncertain words array
	$count = 0;						// Reset count
	$this_word_count = 0;			// Reset per-word count

	$words = explode(" ",$line);
	
	for ($i = 0; $i < count($words); $i++) {
		$this_word_count = 0;
		$this_word_count = count_word($words[$i]);
		$count += $this_word_count;
		//$words[$i] .= "[".$this_word_count."]";
	}	

	if ($verbose) {
		if ($uncertainty_in_line) {
			echo "<p>Some of these words were counted by a best-guess counting algorithm, and should be considered uncertain.</p>\n";
			echo "<pre>";
			print_r($uncertain_words);
			echo "</pre>\n";
		} else {
			echo "<p>All words found in the dictionary; syllable count can be considered reasonably accurate.";
		}
	}

	return $count;
}

// ------------------------------------------------------------------------ //
// Accepts:	$word as string
// Returns: $count as int
// Calls:	query_word($word)
//			count_syllables($word)
// Globals:	$countsource as boolean
//			$uncertainty_in_line as boolean
//			$uncertain_words as array
// ------------------------------------------------------------------------ //
function count_word($word) {
	
	global $countsource;
	global $uncertainty_in_line;
	global $uncertain_words;
	
	$count = query_word($word);
	if ($count == false) {
		$uncertainty_in_line = true;
		$uncertain_words[] = $word;
		$count = count_syllables($word);
		if ($countsource) echo "<strong>[".$count."] ".$word."</strong>: count generated by counting algorithm";
	} else {
		if ($countsource) echo "<strong>[".$count."] ".$word."</strong>: count retrieved by ARPAbet query result";
	}
	return $count;
	
}

function query_word($word) {
	$count = 0;	
	$query = "SELECT * FROM `dictionary` WHERE `w_word` = '".$word."'";
	$result = db_query($query);
	
	if ($result->num_rows > 0) {
		while ($row = mysqli_fetch_assoc($result)) {
			$count = $row['w_syllables'];
		}
		return $count;
	} else {
		return false;
	}
}

// ------------------------------------------------------------------------ //
// Accepts:	$words as array
// Returns:	none
// Calls:	count_syllables($word)
// ------------------------------------------------------------------------ //
function count_words_array($words) {
	for ($i = 0; $i < count($words); $i++) {
		count_syllables($words[$i]);
	}	
}
	
// ------------------------------------------------------------------------ //
// MOST RECENT VERSION
// Accepts:	$word as string
// Returns: $syllable_count as int
// Calls:	is_punctuation($letter)
//			is_vowel ($letter)
// Globals:	$verbose as boolean
// ------------------------------------------------------------------------ //
function count_syllables($word) {
	
	global $verbose;
	
	// This one might be a little too brute force a solution -- this will strip out all punctuation from the word
	// [TO-DO] Think through the ways that punctuation might impact syllables more carefully
	$word = preg_replace("#[[:punct:]]#", "", $word);
	
	$last_letter_was_vowel = false;
	$last_letter = "";
	$two_letters_ago = "";
	
	$syllable_count = 0;
	
	if ($verbose) echo "<p><strong>". $word . "</strong></p>\n";
	
	for ($i = 0; $i < strlen($word); $i++) {
		
		$final_letter = ($i+1 == strlen($word)) ? true : false;		
		
		$this_letter = substr($word, $i, 1);
		
		if (is_punctuation($this_letter)) {
			continue;
		}
		
		if (is_vowel($this_letter)) {
			if (!$last_letter_was_vowel) { 
				
				if ($verbose) echo "<p>" . $this_letter . " is a vowel.</p>\n";
				$last_letter_was_vowel = true;
				
				if ($final_letter) {
					if ($this_letter == "e") {
						if ($last_letter == "l") {
							if (is_vowel($two_letters_ago)) {
								if ($verbose) echo "<p>This is the last letter, an e, following an L, but two letters ago was a vowel.  We should (almost always) NOT count this.</p>\n";
							} else {
								if (($two_letters_ago == "l") && is_vowel(substr($word,$i-3,1))) {
									if ($verbose) echo "<p>This is the last letter, e, following a double-L, with a vowel before that.  We should (almost always) NOT count this.</p>\n";
								} else {
									if ($verbose) echo "<p><strong>(+1)</strong> This is the last letter, an e, following an L, and two letters ago was not a vowel.  We should (almost always) count this.</p>\n";
									$syllable_count++;
								}
							}
						} else {
							if ($verbose) echo "<p>This is the last letter, and an e, following a consonent, and not an L.  We should (almost always) ignore this.</p>\n";
						}
					} else {
						$syllable_count++;
					}
				} else {
					$syllable_count++;				
				}
				
			} else {
				
				if ($last_letter != "i") {
					if ($verbose) echo "<p>". $this_letter . " is a vowel, but we don't care since the last one was too.</p>\n";
				} else {
					// RULE: Words that end in "ie" are a single syllable / vowel sound
					if ($final_letter && ($this_letter=="e")) {
						if ($verbose) echo "<p>" . $this_letter . " is a vowel, and follows an i, but it's an e and the last letter, so we don't care.</p>\n";
					} else {
						// RULE: Words that have "ia" are two syllables, unless they follow a "c" (e.g., "social")
						if ($two_letters_ago == "c") {
							if ($verbose) echo "<p>" . $this_letter . " is a vowel, and follows an i, but the letter before i was a c, so we don't care.</p>\n";
						
						// RULE: -tion, -tian is one syllable
						} else if (substr($word,$i-2,1) == "t" && !$final_letter && substr($word,$i+1,1) == "n") {
							if ($verbose) echo "<p>This is forming a -tian or -tion, which we should (almost always) ignore.</p>\n";
						} else {
							if ($verbose) echo "<p><strong>(+1)</strong>" . $this_letter . " is a vowel, following a vowel, but the last letter was an i, so we do care.</p>\n";
							$syllable_count++;
						}
					}
				}
			}
			
		} else {
			if ($verbose) echo "<p>" . $this_letter . " is a consonant</p>\n";
			$last_letter_was_vowel = false;
		}
		
		// RULE: If an o follows an e, this creates another syllable
		// [TO-DO] While this is almost always true, there are a lot of exceptions to this (e.g. "burgeon", "dungeon", etc.) -- create a deeper rule set?
		if ($this_letter == "o") {
			if ($last_letter == "e") {
				if ($verbose) echo "<p>This word has an \"eo\" in it, meaning that this adds another vowel, breaking the paired-vowel/single-syllable rule</p>\n";
				$syllable_count++;
			}
		}
		
		// If we're on the last letter...
		if ($final_letter) {			
			
			// RULE: If a word ends in "sm" (e.g. "activism"), we add a vowel	
			if ($this_letter == "m") {
				if ($last_letter == "s") {
					if ($verbose) echo "<p>This word ends in \"sm\" so we add another syllable for the implied vowel sound.</p>\n";
					$syllable_count++;
				}
			} else if ($this_letter == "d") {
				if ($last_letter == "e") {
					if (in_array($two_letters_ago, array("d","t","l"))) {
						if ($verbose) echo "<p>This word ends in \"-ed\" but it follows a d or t or L, which makes it a pronounced syllable/vowel sound.</p>\n";
					} else {
						if ($verbose) echo "<p>This word ends in \"-ed\" but doesn't follow a d or t, so we're going to remove that last e syllable as silent.</p>\n";
						$syllable_count--;
					}
				}
			} else if ($this_letter == "s") {
				
				// RULE: Plural words that otherwise ended in "e" follow that silent e rule, above
				if ($last_letter == "e") {
					if ($two_letters_ago == "l") {
						if (is_vowel(substr($word,$i-3,1))) {
							if ($verbose) echo "<p>This is the last letter, an e, following an L, but three letters ago was a vowel.  We should (almost always) NOT count this.</p>\n";
						} else {
							if ((substr($word,$i-3,1) == "l") && is_vowel(substr($word,$i-4,1))) {
								if ($verbose) echo "<p>This is the last letter, e, following a double-L, with a vowel before that.  We should (almost always) NOT count this.</p>\n";
							} else {
								if ($verbose) echo "<p><strong>(+1)</strong> This is the last letter, and an e, and following an L that followed a consonant.  We should (almost always) count this.</p>\n";
								$syllable_count++;
							}
						}
					} else {
						if ($verbose) echo "<p>This is a pluralization of a word with the the last letter e, following a consonent, and not an L.  We should (almost always) ignore this.</p>\n";
						$syllable_count--;
					}
				}
			} else if ($this_letter == "c") {
				if ($last_letter == "i") {
					if (is_vowel($two_letters_ago)) {
						if ($verbose) echo "<p>This word ends in -vowel -ic, which means the i gets its own vowel sound and syllable.  Adding a syllable here.</p>\n";
						$syllable_count++;
					}
				}
			}
			
			// RULE: If a word ends in "e", we largely ignore this vowel			
			
		}
		
		$two_letters_ago = $last_letter;
		$last_letter = $this_letter;
		
	}
	
	if ($verbose) echo "<p>Our final syllable count is " . $syllable_count . "</p>\n";
	if ($verbose) echo "<hr>\n";
	
	return $syllable_count;
	
}
		
?>